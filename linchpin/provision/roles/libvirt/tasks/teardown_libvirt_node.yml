- name: "Get topology output data from RunDB"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: get
    table: "{{ target }}"
    key: "outputs"
    run_id: "{{ orig_run_id }}"
  register: topo_output

- name: Filter list for resources
  set_fact:
    topo_output_resources: "{{ topo_output.output | filter_list_by_attr('resources') }}"

- name: "set topo_output_resources fact"
  set_fact:
    topo_output_resources: "{{ topo_output_resources[0]['resources'] }}"

- set_fact:
    libvirt_resource_names: "{{ topo_output_resources | fetch_vm_names }}"

#- set_fact:
#      res_count: '{{ (res_count | default([])) + [item | int] }}'
#  with_sequence: "start=0 end={{ res_def['count'] | default(1) |int - 1 }}"

- name: "halt node"
  virt:
    name: "{{ instance[1] }}"
    state: destroyed
    uri: "{{ instance[0]['uri'] | default('qemu:///system') }}"
  with_nested:
    - ["{{ res_def }}"]
    - "{{ libvirt_resource_names }}"
  loop_control:
    loop_var: instance
  register: res_def_output
  ignore_errors: yes
  delegate_to: "{{ uri_hostname }}"
  when: not _async

- name: "get XML definition of vm"
  command: "virsh -c {{ instance[1]  }} dumpxml {{ instance[0] }}"
  with_nested:
    - "{{ libvirt_resource_names }}"
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
  loop_control:
    loop_var: instance
  when: not _async
  register: vm_xml_dump
  ignore_errors: yes

- name: "undefine node"
  virt:
    name: "{{ instance[1] }}"
    command: undefine
    uri: "{{ instance[0]['uri'] | default('qemu:///system') }}"
  with_nested:
    - ["{{ res_def }}"]
    - "{{ libvirt_resource_names }}"
  loop_control:
    loop_var: instance
  register: res_def_output
  when: not _async
  ignore_errors: yes

- name: "Delete associated image files"
  file:
    state: absent
    path: "{{ inst }}"
  with_items: "{{ vm_xml_dump | get_libvirt_files }}"
  loop_control:
    loop_var: inst
  ignore_errors: yes
  become: "{{ libvirt_become }}"
  delegate_to: "{{ uri_hostname }}"
  when: not _async
