// Define the openshift pod name, docker repo url, namespace, and service acct
// for the DSL pod template.
dslPodName = "contraDsl-${UUID.randomUUID()}"
dockerRepoURL = env.DOCKER_REPO_URL ?: '172.30.254.79:5000'
openshiftNamespace = env.OPENSHIFT_NAMESPACE ?: 'continuous-infra'
openshiftServiceAccount = env.OPENSHIFT_SERVICE_ACCOUNT ?: 'jenkins'

env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/linchpin'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'develop'
env.ghprbPullAuthorLogin = env.ghprbPullAuthorLogin ?: ''
env.ghprbPullId = env.ghprbPullId ?: ''

properties([
  buildDiscarder(logRotator(artifactNumToKeepStr: '10', numToKeepStr: '10')),
  [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/linchpin/'],
  parameters(
    [
      string(defaultValue: 'develop',
             description: '',
             name: 'ghprbActualCommit'),
      string(defaultValue: '',
             description: '',
             name: 'sha1'),
      string(defaultValue: '',
             description: 'Pull Request Number',
             name: 'ghprbPullId'),
      string(defaultValue: '',
             description: 'Pull Request Author username',
             name: 'ghprbPullAuthorLogin'),
      string(defaultValue: '',
             description: 'Git Hub Repository',
             name: 'ghprbGhRepository'),
    ]
  ),
])

// Create the DSL podTemplate
createDslContainers podName: dslPodName,
                    dockerRepoURL: dockerRepoURL,
                    openshiftNamespace: openshiftNamespace,
                    openshiftServiceAccount: openshiftServiceAccount,
// Pass the remainder of your jenkinsfile as a closure to the createDslContainers method
{
  node(dslPodName){
      stage("pre-flight"){
          deleteDir()
          checkout([$class: 'GitSCM',
                    branches: [[name: env.ghprbActualCommit]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [],
                    submoduleCfg                     : [],
                    userRemoteConfigs                : [
                            [refspec:
                                     '+refs/heads/*:refs/remotes/origin/*  +refs/pull/*:refs/remotes/origin/pr/* ',
                             url: "https://github.com/${env.ghprbGhRepository}"]
                    ]
          ])
      }

      stage("Parse Configuration"){
          parseConfig()
          echo env.configJSON
      }

      //stage("Deploy Infra"){
      //    deployInfra verbose: true
      //}

      //stage("Configure Infra"){
      //    configureInfra verbose: true
      //}

      stage("Execute Tests"){
          executeTests verbose: true
      }

      //stage("Destroy Infra"){
      //    destroyInfra verbose: true
      //}
      archiveArtifacts allowEmptyArchive: true, artifacts: '*, linchpin/*, resources/*, linchpin/resources/*'
  }
}
