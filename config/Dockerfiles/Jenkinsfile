import com.cloudbees.plugins.credentials.Credentials

env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/linchpin'
env.ghprbActualCommit = env.ghprbActualCommit ?: 'develop'
env.ghprbPullAuthorLogin = env.ghprbPullAuthorLogin ?: ''
env.ghprbPullId = env.ghprbPullId ?: ''

env.TARGET_BRANCH = env.TARGET_BRANCH ?: 'develop'

// Needed for podTemplate()
env.SLAVE_TAG = env.SLAVE_TAG ?: 'stable'
env.FEDORA26_TAG = env.FEDORA26_TAG ?: 'stable'
env.FEDORA27_TAG = env.FEDORA27_TAG ?: 'stable'
env.CENTOS7_TAG = env.CENTOS7_TAG ?: 'stable'

DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.254.79:5000'
// if LINCHPIN_PROVIDERS is defined in jenkins global
// environment this will limit the possible providers tested.
// if it's not defined you will get all the possible providers
// listed here.

LPROVIDERS = env.LINCHPIN_PROVIDERS ?: 'dummy duffy libvirt aws'
PPROVIDERS = LPROVIDERS.tokenize()

TEST_PROVIDERS = env.TEST_PROVIDERS ?: 'dummy duffy libvirt aws beaker openstack'
TPROVIDERS = TEST_PROVIDERS.tokenize()

env.PROVIDERS = TPROVIDERS.intersect( PPROVIDERS ).join(" ")

OPENSHIFT_NAMESPACE = env.OPENSHIFT_NAMESPACE ?: 'continuous-infra'
OPENSHIFT_SERVICE_ACCOUNT = env.OPENSHIFT_SERVICE_ACCOUNT ?: 'jenkins'

// Execution ID for this run of the pipeline
executionID = UUID.randomUUID().toString()

// Pod name to use
podName1 = 'lp_container-1-' + executionID
podName2 = 'lp_container-2-' + executionID
podName3 = 'lp_container-3-' + executionID

def libraries = ['cico-pipeline'           : ['master', 'https://github.com/CentOS/cico-pipeline-library.git'],
                 'ci-pipeline'             : ['master', 'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git'],
                 'upstream-fedora-pipeline': ['smalltest', 'https://github.com/johnbieren/upstream-fedora-pipeline.git']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])
}

properties(
    [
        buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '15', daysToKeepStr: '90', numToKeepStr: '30')),
        [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/linchpin/'],
        disableConcurrentBuilds(),
        parameters(
            [
                string(defaultValue: 'develop',
                       description: '',
                       name: 'ghprbActualCommit'),
                string(defaultValue: '',
                       description: '',
                       name: 'sha1'),
                string(defaultValue: '',
                       description: 'Pull Request Number',
                       name: 'ghprbPullId'),
                string(defaultValue: '',
                       description: 'Pull Request Author username',
                       name: 'ghprbPullAuthorLogin'),
                string(defaultValue: '',
                       description: 'Git Hub Repository',
                       name: 'ghprbGhRepository'),
                string(defaultValue: 'stable',
                       description: 'Tag for slave image',
                       name: 'SLAVE_TAG'),
                string(defaultValue: 'stable',
                       description: 'Tag for fedora26 image',
                       name: 'FEDORA26_TAG'),
                string(defaultValue: 'stable',
                       description: 'Tag for fedora27 image',
                       name: 'FEDORA27_TAG'),
                string(defaultValue: 'stable',
                       description: 'Tag for centos7 image',
                       name: 'CENTOS7_TAG'),
                string(description: 'Providers to be tested',
                       name: 'TEST_PROVIDERS')
            ]
        ),
    ]
)

stage('Tests') {
    currentBuild.displayName = "Build#: ${env.BUILD_NUMBER} - PR: ${env.ghprbPullId} - Author: ${env.ghprbPullAuthorLogin}"
    if (env.ghprbActualCommit != null && env.ghprbActualCommit != "develop") {
        currentBuild.description = "<a href=\"https://github.com/${env.ghprbGhRepository}/pull/${env.ghprbPullId}\">PR #${env.ghprbPullId} (${env.ghprbPullAuthorLogin})</a>"
    }
    try {
        parallel (
            "Centos7" : {
                packagepipelineUtils.clearTemplateNames()
                podTemplate(name: podName1,
                            label: podName1,
                            cloud: 'openshift',
                            serviceAccount: OPENSHIFT_SERVICE_ACCOUNT,
                            idleMinutes: 0,
                            namespace: OPENSHIFT_NAMESPACE,

                        containers: [
                            // This adds the custom slave container to the pod.
                            // Must be first with name 'jnlp'
                            containerTemplate(name: 'jnlp',
                                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
                                ttyEnabled: false,
                                args: '${computer.jnlpmac} ${computer.name}',
                                command: '',
                                workingDir: '/workDir'),
                            containerTemplate(name: 'centos7',
                                alwaysPullImage: true,
                                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/centos7:' + CENTOS7_TAG,
                                ttyEnabled: false,
                                command: '/usr/sbin/init',
                                privileged: true,
                                workingDir: '/workDir')
                        ],
                        volumes: [
                            emptyDirVolume(memory: false, mountPath: '/sys/class/net')
                        ]
                )
                {
                    execute_test(podName1, "centos7")
                }
            }, fedora26: {
                packagepipelineUtils.clearTemplateNames()
                podTemplate(name: podName2,
                            label: podName2,
                            cloud: 'openshift',
                            serviceAccount: OPENSHIFT_SERVICE_ACCOUNT,
                            idleMinutes: 0,
                            namespace: OPENSHIFT_NAMESPACE,

                        containers: [
                            // This adds the custom slave container to the pod.
                            // Must be first with name 'jnlp'
                            containerTemplate(name: 'jnlp',
                                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
                                ttyEnabled: false,
                                args: '${computer.jnlpmac} ${computer.name}',
                                command: '',
                                workingDir: '/workDir'),
                            containerTemplate(name: 'fedora26',
                                alwaysPullImage: true,
                                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/fedora26:' + FEDORA26_TAG,
                                ttyEnabled: false,
                                command: '/root/init_libvirt.sh',
                                privileged: true,
                                workingDir: '/workDir')
                        ],
                        volumes: [
                            emptyDirVolume(memory: false, mountPath: '/sys/class/net')
                        ]
                )
                {
                    execute_test(podName2, "fedora26")
                }
            }, fedora27: {
                packagepipelineUtils.clearTemplateNames()
                podTemplate(name: podName3,
                            label: podName3,
                            cloud: 'openshift',
                            serviceAccount: OPENSHIFT_SERVICE_ACCOUNT,
                            idleMinutes: 0,
                            namespace: OPENSHIFT_NAMESPACE,

                        containers: [
                            // This adds the custom slave container to the pod.
                            // Must be first with name 'jnlp'
                            containerTemplate(name: 'jnlp',
                                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/jenkins-continuous-infra-slave:' + SLAVE_TAG,
                                ttyEnabled: false,
                                args: '${computer.jnlpmac} ${computer.name}',
                                command: '',
                                workingDir: '/workDir'),
                            containerTemplate(name: 'fedora27',
                                alwaysPullImage: true,
                                image: DOCKER_REPO_URL + '/' + OPENSHIFT_NAMESPACE + '/fedora27:' + FEDORA27_TAG,
                                ttyEnabled: false,
                                command: '/root/init_libvirt.sh',
                                privileged: true,
                                workingDir: '/workDir')
                        ],
                        volumes: [
                            emptyDirVolume(memory: false, mountPath: '/sys/class/net')
                        ]
                )
                {
                    execute_test(podName3, "fedora27")
                }
            }
        )
    } catch (e) {
        // Set build result
        currentBuild.result = 'FAILURE'

        // Report the exception
        echo e.getMessage()

        // Throw the error
        throw e

    }
}

def prepare_env() {
    dir('linchpin') {
        checkout([$class: 'GitSCM',
                  branches: [[name: env.ghprbActualCommit]],
                  doGenerateSubmoduleConfigurations: false,
                  extensions                       : [],
                  submoduleCfg                     : [],
                  userRemoteConfigs                : [
                          [refspec:
                                   '+refs/heads/*:refs/remotes/origin/*  +refs/pull/*:refs/remotes/origin/pr/* ',
                           url: "https://github.com/${env.ghprbGhRepository}"]
                  ]
        ])
        sh """
          git clone https://github.com/CentOS-PaaS-SIG/duffy-ansible-module.git
        """
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
          com.cloudbees.plugins.credentials.Credentials.class
        );
        for (provider in PPROVIDERS) {
          def cf = creds.findResult { it.id == provider + '-key' ? it : null }
          if ( cf ) {
            println "found credential ${cf.id} filename:${cf.fileName}"
            withCredentials([file(credentialsId: provider + '-key', variable: 'FILEKEY')]) {
            sh """
                #!/bin/bash -x
                mkdir -p keys/
                cp ${FILEKEY} keys/${cf.fileName}
                chmod 0600 keys/${cf.fileName}
            """
            }
          }
        }
    }
}

def execute_test(String podname, String container) {
    node(podname) {
        try {
            stage('Validations') {
                env.HOME = "/root"
                deleteDir()
                pipelineUtils.setDefaultEnvVars()
                pipelineUtils.verifyPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
                prepare_env()
            }
            def currentStage = container + "-install"
            stage(currentStage) {
                dir('linchpin') {
                  pipelineUtils.executeInContainer(currentStage, container, "./config/Dockerfiles/linchpin-install.sh")
                }
            }
            currentStage = container + "-test"
            stage(currentStage) {
                dir('linchpin') {
                  env.distro = container
                  pipelineUtils.executeInContainer(currentStage, container, "./config/Dockerfiles/linchpin-tests.sh")
                }
            }
        } finally {
            pipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
            // Archive our artifacts
            step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/*_logs/**,*.txt,*.groovy,**/job.*,**/*.groovy,**/inventory.*', excludes: '**/job.props,**/job.props.groovy,**/*.example', fingerprint: true])
        }
    }
}
